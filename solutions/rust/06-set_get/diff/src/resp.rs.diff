@@ -1,66 +1,69 @@
 use anyhow::{Error, Result};
 use bytes::BytesMut;
 use tokio::{io::AsyncReadExt, io::AsyncWriteExt, net::TcpStream};

 const CARRIAGE_RETURN: u8 = '\r' as u8;
 const NEWLINE: u8 = '\n' as u8;

 #[derive(Eq, PartialEq, Clone, Debug)]
 pub enum Value {
+    /// Null bulk reply, `$-1\r\n`
+    Null,
     /// For Simple Strings the first byte of the reply is "+".
     SimpleString(String),
     /// For Errors the first byte of the reply is "-".
     Error(String),
     /// For Bulk Strings the first byte of the reply is "$".
     BulkString(String),
     /// For Arrays the first byte of the reply is "*".
     Array(Vec<Value>),
 }

 impl Value {
     pub fn to_command(&self) -> Result<(String, Vec<Value>)> {
         match self {
             Value::Array(items) => {
                 return Ok((
                     items.first().unwrap().unwrap_bulk(),
                     items.clone().into_iter().skip(1).collect(),
                 ));
             }
             _ => Err(Error::msg("not an array")),
         }
     }

     fn unwrap_bulk(&self) -> String {
         match self {
             Value::BulkString(str) => str.clone(),
             _ => panic!("not a bulk string"),
         }
     }

     pub fn encode(self) -> String {
         match &self {
+            Value::Null => "$-1\r\n".to_string(),
             Value::SimpleString(s) => format!("+{}\r\n", s.as_str()),
             Value::Error(msg) => format!("-{}\r\n", msg.as_str()),
             Value::BulkString(s) => format!("${}\r\n{}\r\n", s.chars().count(), s),
             // The other cases are not required
             _ => panic!("value encode not implemented for: {:?}", self),
         }
     }
 }

 pub struct RespConnection {
     stream: TcpStream,
     buffer: BytesMut,
 }

 impl RespConnection {
     pub fn new(stream: TcpStream) -> Self {
         return RespConnection {
             stream,
             buffer: BytesMut::with_capacity(512),
         };
     }

     pub async fn read_value(&mut self) -> Result<Option<Value>> {
         loop {
             let bytes_read = self.stream.read_buf(&mut self.buffer).await?;

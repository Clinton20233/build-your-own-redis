@@ -1,48 +1,50 @@
 package main

 import (
-	"bytes"
+	"bufio"
 	"fmt"
-	"io"
 	"net"
 	"os"
 )

 func main() {
 	l, err := net.Listen("tcp", "0.0.0.0:6379")
 	if err != nil {
 		fmt.Println("Failed to bind to port 6379")
 		os.Exit(1)
 	}

 	for {
 		conn, err := l.Accept()
 		if err != nil {
 			fmt.Println("Error accepting connection: ", err.Error())
 			os.Exit(1)
 		}

 		go handleConnection(conn)
 	}
 }

 func handleConnection(conn net.Conn) {
 	defer conn.Close()

 	for {
-		buf := make([]byte, 1024)
-
-		if _, err := conn.Read(buf); err != nil {
-			if err == io.EOF {
-				break
-			} else {
-				fmt.Println("error reading from client: ", err.Error())
-				os.Exit(1)
-			}
+		value, err := DecodeRESP(bufio.NewReader(conn))
+		if err != nil {
+			fmt.Println("Error decoding RESP: ", err.Error())
+			return // Ignore clients that we fail to read from
 		}

-		// Let's ignore the client's input for now and hardcode a response.
-		// We'll implement a proper Redis Protocol parser in later stages.
-		conn.Write([]byte("+PONG\r\n"))
+		command := value.Array()[0].String()
+		args := value.Array()[1:]
+
+		switch command {
+		case "ping":
+			conn.Write([]byte("+PONG\r\n"))
+		case "echo":
+			conn.Write([]byte(fmt.Sprintf("$%d\r\n%s\r\n", len(args[0].String()), args[0].String())))
+		default:
+			conn.Write([]byte("-ERR unknown command '" + command + "'\r\n"))
+		}
 	}
 }

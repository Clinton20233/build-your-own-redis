@@ -4,144 +4,201 @@

 module Main (main) where

 import Network.Simple.TCP (serve, HostPreference(HostAny))
 import Network.Socket.ByteString (recv, send)
 import Control.Monad (forever, guard)
 import Data.ByteString (ByteString, pack)
 import qualified Data.ByteString.Char8 as B
 import Prelude hiding (concat)
 import Text.Megaparsec
     ( parse,
       count,
       (<|>),
       Parsec,
       MonadParsec(try),
       Stream(Tokens) )
 import Text.Megaparsec.Byte ( crlf, printChar, string )
 import Text.Megaparsec.Byte.Lexer (decimal)
 import Data.Void ( Void )
 import Data.Text ( toLower, Text )
 import Data.Text.Encoding (decodeUtf8)
 import Data.Map (Map, insert, findWithDefault, empty)
 import Data.Map.Internal.Debug (showTree)
 import Control.Concurrent.STM (atomically, newTVarIO, readTVarIO, TVar)
 import Control.Concurrent.STM.TVar (modifyTVar)
+import Data.Time
+    ( UTCTime,
+      defaultTimeLocale,
+      parseTimeOrError,
+      addUTCTime,
+      diffUTCTime,
+      getCurrentTime )

 type Request = ByteString
 type Response = ByteString
 type Parser = Parsec Void Request
 type Message = ByteString
 type Key = ByteString
 type Value = ByteString
-type DB = Map Key Value
+type DB = Map Key (Value, Maybe Expiry)
+type Expiry = UTCTime
+type Time = Maybe Integer

 data Command = Ping
              | Echo Message
-             | Set Key Value
+             | Set Key Value Time
              | Get Key
 data ApplicationError = UnknownCommand

+
 main :: IO ()
 main = do
     let port = "6379"
     putStrLn $ "Redis server listening on port " ++ port
     redisDB <- setupDB
     serve HostAny port $ \(socket, address) -> do
         putStrLn $ "successfully connected client: " ++ show address
         _ <- forever $ do
             request <- recv socket 2048
             response <- do
                 case parseRequest request of
                     Left _ -> return "-ERR Unknown Command"
                     Right cmd -> exec cmd redisDB
             _ <- send socket (encodeRESP response)

             -- debug database
             out <- readTVarIO redisDB
             putStrLn $ "\r\n***\r\nRedis DB content:\r\n"++ showTree out ++ "***\r\n"
         putStrLn $ "disconnected client: " ++ show address

+toUTCTime :: ByteString -> UTCTime
+toUTCTime t = parseTimeOrError True defaultTimeLocale "%Y-%m-%dT%H:%M:%S%Q" $ B.unpack t
+
 setupDB :: IO (TVar DB)
 setupDB = newTVarIO empty

 encodeRESP :: Response -> Response
-encodeRESP s = B.concat ["+", s, "\r\n"]
+encodeRESP s | s == "(nil)" = "$-1\r\n"
+             | otherwise    = B.concat ["+", s, "\r\n"]

 exec :: Command -> TVar DB -> IO Response
-exec Ping _ = return "PONG"
-exec (Echo msg) _ = return msg
-exec (Set key value) db = set key value db
-exec (Get key) db = get key db
+exec Ping _                   = return "PONG"
+exec (Echo msg) _             = return msg
+exec (Set key value time) db  = set key value time db
+exec (Get key) db             = get key db

 parseRequest :: Request -> Either ApplicationError Command
 parseRequest req = case parseResult of
                        Left _    -> Left UnknownCommand
                        Right cmd -> Right cmd
                    where parseResult = parse parseToCommand "" req

 parseToCommand :: Parser Command
 parseToCommand = try parseEcho
              <|> try parsePing
              <|> try parseSet
              <|> try parseGet

 cmpIgnoreCase :: Text -> Text -> Bool
 cmpIgnoreCase a b = toLower a == toLower b

 -- some tools escape backslashes
 crlfAlt :: Parser (Tokens ByteString)
 crlfAlt = "\\r\\n" <|> crlf

 redisBulkString :: Parser ByteString
 redisBulkString = do
     _ <- "$"
     n <- decimal
     guard $ n >= 0
     _ <- crlfAlt
     s <- count n printChar
     return $ pack s

 commandCheck :: Text -> Parser (Integer, ByteString)
 commandCheck c = do
     _ <- "*"
     n <- decimal
     guard $ n > 0
     cmd <- crlfAlt *> redisBulkString
     guard $ cmpIgnoreCase (decodeUtf8 cmd) c
     return (n, cmd)

+redisOptionCheck :: Text -> Parser ()
+redisOptionCheck opt = do
+    o <- redisBulkString
+    guard $ cmpIgnoreCase (decodeUtf8 o) opt
+    return ()
+
+redisInteger :: Parser Integer
+redisInteger = do
+    _ <- "$"
+    n <- decimal
+    guard $ (n::Integer) >= 0
+    _ <- crlfAlt
+    decimal
+
 parseEcho :: Parser Command
 parseEcho = do
     (n, _) <- commandCheck "echo"
     guard $ n == 2
     message <- crlfAlt *> redisBulkString
     return $ Echo message

 parsePing :: Parser Command
 parsePing = do
     (n, _) <- commandCheck "ping"
     guard $ n == 1
     return Ping

 parseSet :: Parser Command
 parseSet = do
     (n, _) <- commandCheck "set"
-    guard $ n == 3
+    guard $ n >= 3
     key <- crlfAlt *> redisBulkString
     value <- crlfAlt *> redisBulkString
-    return $ Set key value
+    time <- if n >= 4
+        then do
+            _ <- crlfAlt *> redisOptionCheck "px"
+            t <- crlfAlt *> redisInteger
+            return $ Just t
+        else return Nothing
+    return $ Set key value time

 parseGet :: Parser Command
 parseGet = do
     (n, _) <- commandCheck "get"
     guard $ n == 2
     key <- crlfAlt *> redisBulkString
     return $ Get key

-set :: Key -> Value -> TVar DB -> IO Response
-set key val db = do
-    _ <- atomically $ modifyTVar db $ insert key val
+set :: Key -> Value -> Time -> TVar DB -> IO Response
+set key val expiry db = do
+    sysTime <- getCurrentTime
+    let time = case expiry of
+                Just ms -> Just $ addUTCTime (fromInteger ms/1000) sysTime
+                Nothing -> Nothing
+    _ <- atomically $ modifyTVar db $ insert key (val, time)
     return "OK"

 get :: Key -> TVar DB -> IO Response
-get key db = findWithDefault "(nil)" key <$> readTVarIO db
+get key db = do
+    (val, expiry) <- getValTime key <$> readTVarIO db
+    case expiry of
+            Just time -> checkExpiry val time <$> getCurrentTime
+            Nothing -> return val
+
+getValTime :: Key -> DB -> (Value, Maybe Expiry)
+getValTime key db = do
+    let err = ("(nil)", Nothing)
+    findWithDefault err key db
+
+checkExpiry :: Value -> Expiry -> UTCTime -> ByteString
+checkExpiry val dbTime sysTime =
+    if isExpired dbTime sysTime
+        then "(nil)"
+        else val
+
+-- diff: t1 - t2
+isExpired :: UTCTime -> UTCTime -> Bool
+isExpired t1 t2 = diffUTCTime t1 t2 < 0
